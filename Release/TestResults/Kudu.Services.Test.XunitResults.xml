<?xml version="1.0" encoding="utf-8"?>
<assemblies>
  <assembly name="C:\Users\imrandev\Desktop\Kudu\kudu\Kudu.Services.Test\bin\Release\Kudu.Services.Test.DLL" environment="32-bit .NET 4.0.30319.42000 [collection-per-assembly, parallel]" test-framework="xUnit.net 2.0.0.2929" run-date="2017-08-29" run-time="11:22:20" config-file="C:\Users\imrandev\Desktop\Kudu\kudu\Kudu.Services.Test\bin\Release\Kudu.Services.Test.dll.config" total="256" passed="256" failed="0" skipped="0" time="15.126" errors="0">
    <errors />
    <collection total="256" passed="256" failed="0" skipped="0" name="Test collection for Kudu.Services.Test.DLL" time="14.487">
      <test name="Kudu.Services.Infrastructure.Test.MediaTypeMapTest.GetMediaType_HandlesKnownMediaTypes(extension: &quot;.md&quot;, expectedMediaType: &quot;text/plain&quot;)" type="Kudu.Services.Infrastructure.Test.MediaTypeMapTest" method="GetMediaType_HandlesKnownMediaTypes" time="0.0253057" result="Pass" />
      <test name="Kudu.Services.Infrastructure.Test.MediaTypeMapTest.GetMediaType_HandlesKnownMediaTypes(extension: &quot;.txt&quot;, expectedMediaType: &quot;text/plain&quot;)" type="Kudu.Services.Infrastructure.Test.MediaTypeMapTest" method="GetMediaType_HandlesKnownMediaTypes" time="0.0552838" result="Pass" />
      <test name="Kudu.Services.Infrastructure.Test.MediaTypeMapTest.GetMediaType_HandlesKnownMediaTypes(extension: &quot;.js&quot;, expectedMediaType: &quot;application/javascript&quot;)" type="Kudu.Services.Infrastructure.Test.MediaTypeMapTest" method="GetMediaType_HandlesKnownMediaTypes" time="0.0000205" result="Pass" />
      <test name="Kudu.Services.Infrastructure.Test.MediaTypeMapTest.GetMediaType_HandlesKnownMediaTypes(extension: &quot;.html&quot;, expectedMediaType: &quot;text/html&quot;)" type="Kudu.Services.Infrastructure.Test.MediaTypeMapTest" method="GetMediaType_HandlesKnownMediaTypes" time="0.0000341" result="Pass" />
      <test name="Kudu.Services.Infrastructure.Test.MediaTypeMapTest.GetMediaType_HandlesKnownMediaTypes(extension: &quot;.json&quot;, expectedMediaType: &quot;application/json&quot;)" type="Kudu.Services.Infrastructure.Test.MediaTypeMapTest" method="GetMediaType_HandlesKnownMediaTypes" time="0.0000199" result="Pass" />
      <test name="Kudu.Services.Infrastructure.Test.MediaTypeMapTest.GetMediaType_Guards" type="Kudu.Services.Infrastructure.Test.MediaTypeMapTest" method="GetMediaType_Guards" time="0.0037477" result="Pass" />
      <test name="Kudu.Services.Infrastructure.Test.MediaTypeMapTest.GetMediaType_HandlesUnknownMediaTypes(extension: &quot;.foo&quot;)" type="Kudu.Services.Infrastructure.Test.MediaTypeMapTest" method="GetMediaType_HandlesUnknownMediaTypes" time="0.0003757" result="Pass" />
      <test name="Kudu.Services.Infrastructure.Test.MediaTypeMapTest.GetMediaType_HandlesUnknownMediaTypes(extension: &quot;.1  4&quot;)" type="Kudu.Services.Infrastructure.Test.MediaTypeMapTest" method="GetMediaType_HandlesUnknownMediaTypes" time="0.0000302" result="Pass" />
      <test name="Kudu.Services.Infrastructure.Test.MediaTypeMapTest.GetMediaType_HandlesUnknownMediaTypes(extension: &quot;.//&quot;)" type="Kudu.Services.Infrastructure.Test.MediaTypeMapTest" method="GetMediaType_HandlesUnknownMediaTypes" time="0.0000262" result="Pass" />
      <test name="Kudu.Services.Infrastructure.Test.MediaTypeMapTest.GetMediaType_HandlesUnknownMediaTypes(extension: &quot;.1234&quot;)" type="Kudu.Services.Infrastructure.Test.MediaTypeMapTest" method="GetMediaType_HandlesUnknownMediaTypes" time="0.0000204" result="Pass" />
      <test name="Kudu.Services.Test.ApplicationLogsReaderFacts.ApplicationLogsReaderMergesResultsFromMultipleLogFiles" type="Kudu.Services.Test.ApplicationLogsReaderFacts" method="ApplicationLogsReaderMergesResultsFromMultipleLogFiles" time="0.6881209" result="Pass" />
      <test name="Kudu.Services.Test.ApplicationLogsReaderFacts.ApplicationLogsReaderMissingLogMessageIsValidEntry" type="Kudu.Services.Test.ApplicationLogsReaderFacts" method="ApplicationLogsReaderMissingLogMessageIsValidEntry" time="0.0058109" result="Pass" />
      <test name="Kudu.Services.Test.ApplicationLogsReaderFacts.ApplicationLogsReaderWillNotOpenUnlimitedNumberOfFiles" type="Kudu.Services.Test.ApplicationLogsReaderFacts" method="ApplicationLogsReaderWillNotOpenUnlimitedNumberOfFiles" time="0.0885002" result="Pass" />
      <test name="Kudu.Services.Test.ApplicationLogsReaderFacts.ApplicationLogsReaderIncompleteLogEntryIsTreatedAsContentsOfLastValidEntry" type="Kudu.Services.Test.ApplicationLogsReaderFacts" method="ApplicationLogsReaderIncompleteLogEntryIsTreatedAsContentsOfLastValidEntry" time="0.0044759" result="Pass" />
      <test name="Kudu.Services.Test.ApplicationLogsReaderFacts.ApplicationLogsReaderStartsWithMostRecentlyWrittenFile" type="Kudu.Services.Test.ApplicationLogsReaderFacts" method="ApplicationLogsReaderStartsWithMostRecentlyWrittenFile" time="0.0066098" result="Pass" />
      <test name="Kudu.Services.Test.ApplicationLogsReaderFacts.ApplicationLogsReaderReturnsTheCorrectResultsWhenAccessedByMultipleThreads" type="Kudu.Services.Test.ApplicationLogsReaderFacts" method="ApplicationLogsReaderReturnsTheCorrectResultsWhenAccessedByMultipleThreads" time="0.024959" result="Pass" />
      <test name="Kudu.Services.Test.ResumableLogReaderFacts.ResumableLogReaderLogEntriesAreReturnedInReverseOrder" type="Kudu.Services.Test.ResumableLogReaderFacts" method="ResumableLogReaderLogEntriesAreReturnedInReverseOrder" time="0.0033998" result="Pass" />
      <test name="Kudu.Services.Test.ResumableLogReaderFacts.ResumableLogReaderMultilineMessagesAreMergedIntoOneEntry" type="Kudu.Services.Test.ResumableLogReaderFacts" method="ResumableLogReaderMultilineMessagesAreMergedIntoOneEntry" time="0.0029852" result="Pass" />
      <test name="Kudu.Services.Test.ResumableLogReaderFacts.ResumableLogReaderCanReadFromFilesOpenForWriting" type="Kudu.Services.Test.ResumableLogReaderFacts" method="ResumableLogReaderCanReadFromFilesOpenForWriting" time="0.0053085" result="Pass" />
      <test name="Kudu.Services.Test.ResumableLogReaderFacts.ResumableLogReaderLastTimeIsSetToTimeOfLastReadLogEntry" type="Kudu.Services.Test.ResumableLogReaderFacts" method="ResumableLogReaderLastTimeIsSetToTimeOfLastReadLogEntry" time="0.0027908" result="Pass" />
      <test name="Kudu.Services.Test.ResumableLogReaderFacts.ResumableLogReaderSeveralSmallBatchesAreEquivalentToOneLargeBatchInTheCaseOfSingleLogFile" type="Kudu.Services.Test.ResumableLogReaderFacts" method="ResumableLogReaderSeveralSmallBatchesAreEquivalentToOneLargeBatchInTheCaseOfSingleLogFile" time="0.0070175" result="Pass" />
      <test name="Kudu.Services.Test.ResumableLogReaderFacts.ResumableLogReaderCanHandleFileAccessError" type="Kudu.Services.Test.ResumableLogReaderFacts" method="ResumableLogReaderCanHandleFileAccessError" time="0.1397244" result="Pass" />
      <test name="Kudu.Services.Test.ResumableLogReaderFacts.ResumableLogReaderWillNotEnumerateEntireFile" type="Kudu.Services.Test.ResumableLogReaderFacts" method="ResumableLogReaderWillNotEnumerateEntireFile" time="0.0030252" result="Pass" />
      <test name="Kudu.Services.Test.ResumableLogReaderFacts.ResumableLogReaderDoesNotBlockLogWriters" type="Kudu.Services.Test.ResumableLogReaderFacts" method="ResumableLogReaderDoesNotBlockLogWriters" time="0.0077338" result="Pass" />
      <test name="Kudu.Services.Test.LogFileFinderFacts.LogFileFinderIgnoresFilesNotInStandardLogFormat" type="Kudu.Services.Test.LogFileFinderFacts" method="LogFileFinderIgnoresFilesNotInStandardLogFormat" time="0.0038133" result="Pass" />
      <test name="Kudu.Services.Test.LogFileFinderFacts.LogFileFinderLoggingErrorFilesAreSkippedWithoutReading" type="Kudu.Services.Test.LogFileFinderFacts" method="LogFileFinderLoggingErrorFilesAreSkippedWithoutReading" time="0.0037488" result="Pass" />
      <test name="Kudu.Services.Test.LogFileFinderFacts.LogFileFinderFindsSingleLogFile" type="Kudu.Services.Test.LogFileFinderFacts" method="LogFileFinderFindsSingleLogFile" time="0.0031079" result="Pass" />
      <test name="Kudu.Services.Test.LogFileFinderFacts.LogFileFinderEmptyFilesAreReadEachTime" type="Kudu.Services.Test.LogFileFinderFacts" method="LogFileFinderEmptyFilesAreReadEachTime" time="0.0046932" result="Pass" />
      <test name="Kudu.Services.Test.LogFileFinderFacts.LogFileFinderCanHandleDirectoryDoesNotExist" type="Kudu.Services.Test.LogFileFinderFacts" method="LogFileFinderCanHandleDirectoryDoesNotExist" time="0.0012368" result="Pass" />
      <test name="Kudu.Services.Test.LogFileFinderFacts.LogFileFinderIgnoredFilesAreOnlyReadOnce" type="Kudu.Services.Test.LogFileFinderFacts" method="LogFileFinderIgnoredFilesAreOnlyReadOnce" time="0.0166264" result="Pass" />
      <test name="Kudu.Services.Test.LogFileFinderFacts.LogFileFinderFilesAreNotTrackedOnceDeleted" type="Kudu.Services.Test.LogFileFinderFacts" method="LogFileFinderFilesAreNotTrackedOnceDeleted" time="0.0069" result="Pass" />
      <test name="Kudu.Services.Test.LogFileFinderFacts.LogFileFinderValidFilesAreOnlyReadOnce" type="Kudu.Services.Test.LogFileFinderFacts" method="LogFileFinderValidFilesAreOnlyReadOnce" time="0.0102144" result="Pass" />
      <test name="Kudu.Services.Test.LogFileFinderFacts.LogFileFinderSkipsFileOnFileAccessError" type="Kudu.Services.Test.LogFileFinderFacts" method="LogFileFinderSkipsFileOnFileAccessError" time="0.0108063" result="Pass" />
      <test name="Kudu.Services.Test.LogFileFinderFacts.LogFileFinderEmptyFilesAreNotReturned" type="Kudu.Services.Test.LogFileFinderFacts" method="LogFileFinderEmptyFilesAreNotReturned" time="0.0056261" result="Pass" />
      <test name="Kudu.Services.Test.LogFileFinderFacts.LogFileFinderNoLogFilesFoundForEmptyDirectory" type="Kudu.Services.Test.LogFileFinderFacts" method="LogFileFinderNoLogFilesFoundForEmptyDirectory" time="0.0012813" result="Pass" />
      <test name="Kudu.Services.Test.ArmUtilsFacts.ArmUtilsShouldCreateArmEntity" type="Kudu.Services.Test.ArmUtilsFacts" method="ArmUtilsShouldCreateArmEntity" time="0.1188169" result="Pass" />
      <test name="Kudu.Services.Test.ArmUtilsFacts.ArmUtilsShouldNotCreateArmEntity" type="Kudu.Services.Test.ArmUtilsFacts" method="ArmUtilsShouldNotCreateArmEntity" time="0.0007361" result="Pass" />
      <test name="Kudu.Services.Test.ArmUtilsFacts.ArmUtilsShouldCreateArmEntityList" type="Kudu.Services.Test.ArmUtilsFacts" method="ArmUtilsShouldCreateArmEntityList" time="0.004197" result="Pass" />
      <test name="Kudu.Services.Test.ArmUtilsFacts.ArmUtilsShouldNotCreateArmEntityList" type="Kudu.Services.Test.ArmUtilsFacts" method="ArmUtilsShouldNotCreateArmEntityList" time="0.0006238" result="Pass" />
      <test name="Kudu.Services.Test.BitbucketHandlerV2Facts.BitbucketHandlerAllowsPayloadsWithNullNew" type="Kudu.Services.Test.BitbucketHandlerV2Facts" method="BitbucketHandlerAllowsPayloadsWithNullNew" time="0.3787949" result="Pass" />
      <test name="Kudu.Services.Test.BitbucketHandlerV2Facts.BitbucketHandlerReturnsNoOpForCommitsThatAreNotTheTargetBranch" type="Kudu.Services.Test.BitbucketHandlerV2Facts" method="BitbucketHandlerReturnsNoOpForCommitsThatAreNotTheTargetBranch" time="0.0051083" result="Pass" />
      <test name="Kudu.Services.Test.BitbucketHandlerV2Facts.BitbucketHandlerAllowsPayloadsWithNullBranch" type="Kudu.Services.Test.BitbucketHandlerV2Facts" method="BitbucketHandlerAllowsPayloadsWithNullBranch" time="0.0591912" result="Pass" />
      <test name="Kudu.Services.Test.BitbucketHandlerV2Facts.BitbucketHandlerV2IgnoresNonBitbucketPayloads" type="Kudu.Services.Test.BitbucketHandlerV2Facts" method="BitbucketHandlerV2IgnoresNonBitbucketPayloads" time="0.0012334" result="Pass" />
      <test name="Kudu.Services.Test.BitbucketHandlerFacts.BitbucketHandlerIgnoresNonBitbucketPayloads" type="Kudu.Services.Test.BitbucketHandlerFacts" method="BitbucketHandlerIgnoresNonBitbucketPayloads" time="0.00136" result="Pass" />
      <test name="Kudu.Services.Test.BitbucketHandlerFacts.BitbucketHandlerParsesBitbucketPayloadsForPrivateGitRepositories" type="Kudu.Services.Test.BitbucketHandlerFacts" method="BitbucketHandlerParsesBitbucketPayloadsForPrivateGitRepositories" time="0.0387741" result="Pass" />
      <test name="Kudu.Services.Test.BitbucketHandlerFacts.BitbucketHandlerAllowsPayloadsWithNullBranch" type="Kudu.Services.Test.BitbucketHandlerFacts" method="BitbucketHandlerAllowsPayloadsWithNullBranch" time="0.002995" result="Pass" />
      <test name="Kudu.Services.Test.BitbucketHandlerFacts.BitbucketHandlerParsesBitbucketPayloadsForGitRepositories" type="Kudu.Services.Test.BitbucketHandlerFacts" method="BitbucketHandlerParsesBitbucketPayloadsForGitRepositories" time="0.0026277" result="Pass" />
      <test name="Kudu.Services.Test.BitbucketHandlerFacts.BitbucketHandlerParsesBitbucketPayloadsForMercurialRepositoriesWithMultipleCommitsAcrossBranches" type="Kudu.Services.Test.BitbucketHandlerFacts" method="BitbucketHandlerParsesBitbucketPayloadsForMercurialRepositoriesWithMultipleCommitsAcrossBranches" time="0.0032749" result="Pass" />
      <test name="Kudu.Services.Test.BitbucketHandlerFacts.BitbucketHandlerReturnsNoOpForCommitsThatAreNotTheTargetBranch" type="Kudu.Services.Test.BitbucketHandlerFacts" method="BitbucketHandlerReturnsNoOpForCommitsThatAreNotTheTargetBranch" time="0.0012921" result="Pass" />
      <test name="Kudu.Services.Test.BitbucketHandlerFacts.BitbucketHandlerParsesBitbucketPayloadsForGitRepositoriesWithMultipleCommits" type="Kudu.Services.Test.BitbucketHandlerFacts" method="BitbucketHandlerParsesBitbucketPayloadsForGitRepositoriesWithMultipleCommits" time="0.0030235" result="Pass" />
      <test name="Kudu.Services.Test.BitbucketHandlerFacts.BitbucketHandlerParsesBitbucketPayloadsForPrivateMercurialRepositories" type="Kudu.Services.Test.BitbucketHandlerFacts" method="BitbucketHandlerParsesBitbucketPayloadsForPrivateMercurialRepositories" time="0.0027628" result="Pass" />
      <test name="Kudu.Services.Test.BitbucketHandlerFacts.BitbucketDoesNotReturnNoOpForDeleteOperations" type="Kudu.Services.Test.BitbucketHandlerFacts" method="BitbucketDoesNotReturnNoOpForDeleteOperations" time="0.0030952" result="Pass" />
      <test name="Kudu.Services.Test.BitbucketHandlerFacts.BitbucketHandlerParsesBitbucketPayloadsForMercurialRepositories" type="Kudu.Services.Test.BitbucketHandlerFacts" method="BitbucketHandlerParsesBitbucketPayloadsForMercurialRepositories" time="0.0024184" result="Pass" />
      <test name="Kudu.Services.Test.CodeBaseHqFacts.CodeBaseHqHandlerReturnsNoOpForDeploymentsToNonTargetBranch" type="Kudu.Services.Test.CodeBaseHqFacts" method="CodeBaseHqHandlerReturnsNoOpForDeploymentsToNonTargetBranch" time="0.0026727" result="Pass" />
      <test name="Kudu.Services.Test.CodeBaseHqFacts.GitHubHandlerHandlerReturnsNoOpForMalformedPayloads(payloadContent: &quot;{ ref: '' }&quot;)" type="Kudu.Services.Test.CodeBaseHqFacts" method="GitHubHandlerHandlerReturnsNoOpForMalformedPayloads" time="0.0031084" result="Pass" />
      <test name="Kudu.Services.Test.CodeBaseHqFacts.GitHubHandlerHandlerReturnsNoOpForMalformedPayloads(payloadContent: &quot;{ invalid: 'payload' }&quot;)" type="Kudu.Services.Test.CodeBaseHqFacts" method="GitHubHandlerHandlerReturnsNoOpForMalformedPayloads" time="0.0003535" result="Pass" />
      <test name="Kudu.Services.Test.CodeBaseHqFacts.GitHubHandlerHandlerReturnsNoOpForMalformedPayloads(payloadContent: &quot;{ &quot;repository&quot;:{ &quot;url&quot;:&quot;http://test.codebasehq.com&quot;...)" type="Kudu.Services.Test.CodeBaseHqFacts" method="GitHubHandlerHandlerReturnsNoOpForMalformedPayloads" time="0.000394" result="Pass" />
      <test name="Kudu.Services.Test.CodeBaseHqFacts.CodeBaseHqHandlerIgnoresNonCodeBaseHqPayloads" type="Kudu.Services.Test.CodeBaseHqFacts" method="CodeBaseHqHandlerIgnoresNonCodeBaseHqPayloads" time="0.0004333" result="Pass" />
      <test name="Kudu.Services.Test.CodeBaseHqFacts.CodeBaseHqHandlerReturnsNoOpForDelete" type="Kudu.Services.Test.CodeBaseHqFacts" method="CodeBaseHqHandlerReturnsNoOpForDelete" time="0.0056021" result="Pass" />
      <test name="Kudu.Services.Test.CodeBaseHqFacts.CodeBaseHqHandlerProcessesPayload" type="Kudu.Services.Test.CodeBaseHqFacts" method="CodeBaseHqHandlerProcessesPayload" time="0.0064718" result="Pass" />
      <test name="Kudu.Services.Test.CodePlexHandlerFacts.CodePlexHandlerNoOpsDeleteRequest" type="Kudu.Services.Test.CodePlexHandlerFacts" method="CodePlexHandlerNoOpsDeleteRequest" time="0.0084483" result="Pass" />
      <test name="Kudu.Services.Test.CodePlexHandlerFacts.CodePlexHandlerIgnoresNonCodePlexPayloads(payloadContent: &quot;{ invalid: 'payload' }&quot;)" type="Kudu.Services.Test.CodePlexHandlerFacts" method="CodePlexHandlerIgnoresNonCodePlexPayloads" time="0.0007071" result="Pass" />
      <test name="Kudu.Services.Test.CodePlexHandlerFacts.CodePlexHandlerIgnoresNonCodePlexPayloads(payloadContent: &quot;{&quot;before&quot;:&quot;fc10b3aa5a9e39ac326489805bba5c577f04db8&quot;...)" type="Kudu.Services.Test.CodePlexHandlerFacts" method="CodePlexHandlerIgnoresNonCodePlexPayloads" time="0.0017569" result="Pass" />
      <test name="Kudu.Services.Test.CodePlexHandlerFacts.CodePlexHandlerIgnoresNonCodePlexPayloads(payloadContent: &quot;{ ref: '' }&quot;)" type="Kudu.Services.Test.CodePlexHandlerFacts" method="CodePlexHandlerIgnoresNonCodePlexPayloads" time="0.0000461" result="Pass" />
      <test name="Kudu.Services.Test.CodePlexHandlerFacts.CodePlexHandlerParsesGitPayload" type="Kudu.Services.Test.CodePlexHandlerFacts" method="CodePlexHandlerParsesGitPayload" time="0.0008251" result="Pass" />
      <test name="Kudu.Services.Test.CodePlexHandlerFacts.CodePlexHandlerParsesInitialPayloadThatDoesNotHaveBranchInfo(payloadContent: &quot;{ &quot;deployer&quot;: &quot;codeplex&quot;, &quot;newRef&quot;: &quot;8172e1304f9c&quot;&quot;...)" type="Kudu.Services.Test.CodePlexHandlerFacts" method="CodePlexHandlerParsesInitialPayloadThatDoesNotHaveBranchInfo" time="0.0004521" result="Pass" />
      <test name="Kudu.Services.Test.CodePlexHandlerFacts.CodePlexHandlerParsesInitialPayloadThatDoesNotHaveBranchInfo(payloadContent: &quot;{ &quot;deployer&quot;: &quot;codeplex&quot;, &quot;newRef&quot;: &quot;34bb60effd75&quot;&quot;...)" type="Kudu.Services.Test.CodePlexHandlerFacts" method="CodePlexHandlerParsesInitialPayloadThatDoesNotHaveBranchInfo" time="0.0000655" result="Pass" />
      <test name="Kudu.Services.Test.CodePlexHandlerFacts.CodePlexHandlerNoOpsNonTargetBranchPayloads" type="Kudu.Services.Test.CodePlexHandlerFacts" method="CodePlexHandlerNoOpsNonTargetBranchPayloads" time="0.0004498" result="Pass" />
      <test name="Kudu.Services.Test.CodePlexHandlerFacts.CodePlexHandlerNonOpsNonTargetBranchMercurialPayload" type="Kudu.Services.Test.CodePlexHandlerFacts" method="CodePlexHandlerNonOpsNonTargetBranchMercurialPayload" time="0.0004453" result="Pass" />
      <test name="Kudu.Services.Test.CodePlexHandlerFacts.CodePlexHandlerParsesMercurialPayload" type="Kudu.Services.Test.CodePlexHandlerFacts" method="CodePlexHandlerParsesMercurialPayload" time="0.0007413" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseInvalidRequestUri(requestPath: &quot;git/x%5CGit-upload-pack&quot;)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseInvalidRequestUri" time="0.1382628" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseInvalidRequestUri(requestPath: &quot;git/bogus&quot;)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseInvalidRequestUri" time="0.0000473" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseInvalidRequestUri(requestPath: &quot;git/info/refs?invalid&quot;)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseInvalidRequestUri" time="0.0000199" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseInvalidRequestUri(requestPath: &quot;git/info/refs/?service=git-upload-pack&quot;)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseInvalidRequestUri" time="0.0000187" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseInvalidRequestUri(requestPath: &quot;notgit/info/refs&quot;)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseInvalidRequestUri" time="0.0000182" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseInvalidRequestUri(requestPath: &quot;git&quot;)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseInvalidRequestUri" time="0.0207556" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseInvalidRequestUri(requestPath: &quot;&quot;)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseInvalidRequestUri" time="0.0000216" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseInvalidRequestUri(requestPath: &quot;git/////////////////////////&quot;)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseInvalidRequestUri" time="0.0025866" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerBasic(scenario: ValidRequest { ExpectedPath = &quot;c:\mocksite\a\b&quot;, RepositoryExists = True, RequestPath = &quot;a/b&quot;, RequestType = AdvertiseUploadPack, RequestUri = http://ignored/git/a/b/info/refs?service=git-upload-pack, ... })" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerBasic" time="0.4114514" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerBasic(scenario: ValidRequest { ExpectedPath = &quot;c:\mocksite\a\b&quot;, RepositoryExists = True, RequestPath = &quot;a/b&quot;, RequestType = UploadPack, RequestUri = http://ignored/git/a/b/git-upload-pack, ... })" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerBasic" time="0.0665743" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerBasic(scenario: ValidRequest { ExpectedPath = &quot;d:\foo&quot;, RepositoryExists = True, RequestPath = &quot;d%3A%5Cfoo&quot;, RequestType = AdvertiseUploadPack, RequestUri = http://ignored/git/d:%5Cfoo/info/refs?service=git-upload-pack, ... })" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerBasic" time="0.0044468" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerBasic(scenario: ValidRequest { ExpectedPath = &quot;d:\foo&quot;, RepositoryExists = True, RequestPath = &quot;d%3A%5Cfoo&quot;, RequestType = UploadPack, RequestUri = http://ignored/git/d:%5Cfoo/git-upload-pack, ... })" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerBasic" time="0.0061912" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerBasic(scenario: InvalidRequest { ExpectedStatus = BadRequest, RepositoryExists = False, RequestUri = http://ignored/, SiteRoot = &quot;c:\ignored&quot; })" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerBasic" time="0.003779" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerBasic(scenario: InvalidRequest { ExpectedStatus = NotFound, RepositoryExists = False, RequestUri = http://ignored/git/git-upload-pack, SiteRoot = &quot;c:\ignored&quot; })" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerBasic" time="0.0036872" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerBasic(scenario: InvalidRequest { ExpectedStatus = NotFound, RepositoryExists = False, RequestUri = http://ignored/git/info/refs?service=git-upload-pack, SiteRoot = &quot;c:\ignored&quot; })" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerBasic" time="0.0036051" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerBasic(scenario: InvalidRequest { ExpectedStatus = NotImplemented, RepositoryExists = False, RequestUri = http://ignored/git/info/refs?service=git-receive-pack, SiteRoot = &quot;c:\ignored&quot; })" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerBasic" time="0.0035794" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerBasic(scenario: InvalidRequest { ExpectedStatus = NotImplemented, RepositoryExists = False, RequestUri = http://ignored/git/info/refs, SiteRoot = &quot;c:\ignored&quot; })" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerBasic" time="0.0036439" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerBasic(scenario: InvalidRequest { ExpectedStatus = NotImplemented, RepositoryExists = False, RequestUri = http://ignored/git/git-receive-pack, SiteRoot = &quot;c:\ignored&quot; })" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerBasic" time="0.003511" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseValidRequestUri(requestPath: &quot;git/git-receive-pack&quot;, expectedLocaRellPath: &quot;&quot;, expectedRequestType: ReceivePack)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseValidRequestUri" time="0.0012077" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseValidRequestUri(requestPath: &quot;Git/C%3A/a/b/Git-receive-pack?ignored&amp;ignored&quot;, expectedLocaRellPath: &quot;C:\a\b&quot;, expectedRequestType: ReceivePack)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseValidRequestUri" time="0.000678" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseValidRequestUri(requestPath: &quot;git/c%3A%5Ca%5Cb%5Cc%20d/git-upload-pack&quot;, expectedLocaRellPath: &quot;c:\a\b\c d&quot;, expectedRequestType: UploadPack)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseValidRequestUri" time="0.0006643" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseValidRequestUri(requestPath: &quot;git/info/refs?service=git-receive-pack&quot;, expectedLocaRellPath: &quot;&quot;, expectedRequestType: AdvertiseReceivePack)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseValidRequestUri" time="0.0006569" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseValidRequestUri(requestPath: &quot;Git/a/B///info/refs?Service=git-receive-pack&amp;ignor&quot;..., expectedLocaRellPath: &quot;a\B&quot;, expectedRequestType: AdvertiseReceivePack)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseValidRequestUri" time="0.0006608" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseValidRequestUri(requestPath: &quot;Git/A//info/refs?service=git-upload-Pack&amp;ignored&quot;, expectedLocaRellPath: &quot;A&quot;, expectedRequestType: AdvertiseUploadPack)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseValidRequestUri" time="0.0006859" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseValidRequestUri(requestPath: &quot;git/git-upload-pack&quot;, expectedLocaRellPath: &quot;&quot;, expectedRequestType: UploadPack)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseValidRequestUri" time="0.0006426" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseValidRequestUri(requestPath: &quot;git/info/refs&quot;, expectedLocaRellPath: &quot;&quot;, expectedRequestType: LegacyInfoRef)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseValidRequestUri" time="0.0006443" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseValidRequestUri(requestPath: &quot;Git///a/b/C%20d/Info///Refs&quot;, expectedLocaRellPath: &quot;a\b\C d&quot;, expectedRequestType: LegacyInfoRef)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseValidRequestUri" time="0.000735" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseValidRequestUri(requestPath: &quot;git/c%3A/a/b/git-receive-pack&quot;, expectedLocaRellPath: &quot;c:\a\b&quot;, expectedRequestType: ReceivePack)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseValidRequestUri" time="0.000658" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseValidRequestUri(requestPath: &quot;git/info/refs?service=git-upload-pack&quot;, expectedLocaRellPath: &quot;&quot;, expectedRequestType: AdvertiseUploadPack)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseValidRequestUri" time="0.0006762" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseValidRequestUri(requestPath: &quot;git/a/b/info/refs?service=git-receive-pack&quot;, expectedLocaRellPath: &quot;a\b&quot;, expectedRequestType: AdvertiseReceivePack)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseValidRequestUri" time="0.0006489" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseValidRequestUri(requestPath: &quot;git/a/b/c%20d/info/refs&quot;, expectedLocaRellPath: &quot;a\b\c d&quot;, expectedRequestType: LegacyInfoRef)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseValidRequestUri" time="0.0006426" result="Pass" />
      <test name="Kudu.Services.Test.CustomGitRepositoryHandlerFacts.CustomGitRepositoryHandlerParseValidRequestUri(requestPath: &quot;git/a/info/refs?service=git-upload-pack&quot;, expectedLocaRellPath: &quot;a&quot;, expectedRequestType: AdvertiseUploadPack)" type="Kudu.Services.Test.CustomGitRepositoryHandlerFacts" method="CustomGitRepositoryHandlerParseValidRequestUri" time="0.000646" result="Pass" />
      <test name="Kudu.Services.Test.DeploymentControllerFacts.TryParseDeployResultTests(id: null, payload: null, expected: False)" type="Kudu.Services.Test.DeploymentControllerFacts" method="TryParseDeployResultTests" time="0.1100618" result="Pass" />
      <test name="Kudu.Services.Test.DeploymentControllerFacts.TryParseDeployResultTests(id: &quot;deploy_id&quot;, payload: null, expected: False)" type="Kudu.Services.Test.DeploymentControllerFacts" method="TryParseDeployResultTests" time="0.0067028" result="Pass" />
      <test name="Kudu.Services.Test.DeploymentControllerFacts.TryParseDeployResultTests(id: &quot;deploy_id&quot;, payload: [], expected: False)" type="Kudu.Services.Test.DeploymentControllerFacts" method="TryParseDeployResultTests" time="0.0064461" result="Pass" />
      <test name="Kudu.Services.Test.DeploymentControllerFacts.TryParseDeployResultTests(id: &quot;deploy_id&quot;, payload: [[[...]], [[...]], [[...]], [[...]]], expected: False)" type="Kudu.Services.Test.DeploymentControllerFacts" method="TryParseDeployResultTests" time="0.0093146" result="Pass" />
      <test name="Kudu.Services.Test.DeploymentControllerFacts.TryParseDeployResultTests(id: &quot;deploy_id&quot;, payload: [[[...]], [[...]], [[...]], [[...]]], expected: False)" type="Kudu.Services.Test.DeploymentControllerFacts" method="TryParseDeployResultTests" time="0.0064462" result="Pass" />
      <test name="Kudu.Services.Test.DeploymentControllerFacts.TryParseDeployResultTests(id: &quot;deploy_id&quot;, payload: [[[...]], [[...]], [[...]], [[...]]], expected: False)" type="Kudu.Services.Test.DeploymentControllerFacts" method="TryParseDeployResultTests" time="0.0064017" result="Pass" />
      <test name="Kudu.Services.Test.DeploymentControllerFacts.TryParseDeployResultTests(id: &quot;deploy_id&quot;, payload: [[[...]], [[...]], [[...]], [[...]]], expected: False)" type="Kudu.Services.Test.DeploymentControllerFacts" method="TryParseDeployResultTests" time="0.0186822" result="Pass" />
      <test name="Kudu.Services.Test.DeploymentControllerFacts.TryParseDeployResultTests(id: &quot;deploy_id&quot;, payload: [[[...]], [[...]], [[...]], [[...]]], expected: True)" type="Kudu.Services.Test.DeploymentControllerFacts" method="TryParseDeployResultTests" time="0.0142108" result="Pass" />
      <test name="Kudu.Services.Test.DeploymentControllerFacts.TryParseDeployResultTests(id: &quot;deploy_id&quot;, payload: [[[...]], [[...]], [[...]], [[...]], [[...]], ...], expected: True)" type="Kudu.Services.Test.DeploymentControllerFacts" method="TryParseDeployResultTests" time="0.0104174" result="Pass" />
      <test name="Kudu.Services.Test.DeploymentControllerFacts.TryParseDeployResultTests(id: &quot;deploy_id&quot;, payload: [[[...]], [[...]], [[...]], [[...]], [[...]], ...], expected: True)" type="Kudu.Services.Test.DeploymentControllerFacts" method="TryParseDeployResultTests" time="0.0063857" result="Pass" />
      <test name="Kudu.Services.Test.DeploymentControllerFacts.TryParseDeployResultTests(id: &quot;deploy_id&quot;, payload: [[[...]], [[...]], [[...]], [[...]], [[...]], ...], expected: True)" type="Kudu.Services.Test.DeploymentControllerFacts" method="TryParseDeployResultTests" time="0.013454" result="Pass" />
      <test name="Kudu.Services.Test.DeploymentControllerFacts.RedeployReturns404IfCommitDoesNotExist" type="Kudu.Services.Test.DeploymentControllerFacts" method="RedeployReturns404IfCommitDoesNotExist" time="0.6482683" result="Pass" />
      <test name="Kudu.Services.Test.DeploymentControllerFacts.GetLogEntryDetailsReturns404IfLogEntryDetailsDoesNotExist" type="Kudu.Services.Test.DeploymentControllerFacts" method="GetLogEntryDetailsReturns404IfLogEntryDetailsDoesNotExist" time="0.0214405" result="Pass" />
      <test name="Kudu.Services.Test.DeploymentControllerFacts.RedeployReturns404IfRepoDoesNotExist" type="Kudu.Services.Test.DeploymentControllerFacts" method="RedeployReturns404IfRepoDoesNotExist" time="0.0176518" result="Pass" />
      <test name="Kudu.Services.Test.DropboxHelperFacts.GetDeltasPopulatesEntriesNodeWhenHasMoreIsSet" type="Kudu.Services.Test.DropboxHelperFacts" method="GetDeltasPopulatesEntriesNodeWhenHasMoreIsSet" time="0.1093819" result="Pass" />
      <test name="Kudu.Services.Test.DropboxHelperFacts.ApplyChangesCoreThrowsIfAnyFileTaskFails" type="Kudu.Services.Test.DropboxHelperFacts" method="ApplyChangesCoreThrowsIfAnyFileTaskFails" time="0.1130641" result="Pass" />
      <test name="Kudu.Services.Test.DropboxHelperFacts.ProcessFileAsyncRetriesTwice" type="Kudu.Services.Test.DropboxHelperFacts" method="ProcessFileAsyncRetriesTwice" time="2.038777" result="Pass" />
      <test name="Kudu.Services.Test.DropboxHelperFacts.ApplyChangesCoreCreatesDirectoriesForDirectoryDeltas" type="Kudu.Services.Test.DropboxHelperFacts" method="ApplyChangesCoreCreatesDirectoriesForDirectoryDeltas" time="0.0101761" result="Pass" />
      <test name="Kudu.Services.Test.DropboxHelperFacts.ApplyChangesCoreDeletesFilesForDeltasThatHaveBeenDeleted" type="Kudu.Services.Test.DropboxHelperFacts" method="ApplyChangesCoreDeletesFilesForDeltasThatHaveBeenDeleted" time="0.010073" result="Pass" />
      <test name="Kudu.Services.Test.DropboxHelperFacts.GetDeltasPopulatesEntriesNode" type="Kudu.Services.Test.DropboxHelperFacts" method="GetDeltasPopulatesEntriesNode" time="0.0112443" result="Pass" />
      <test name="Kudu.Services.Test.DropboxHelperFacts.ProcessFileAsyncThrowsIfFailedAfterThreeRetries" type="Kudu.Services.Test.DropboxHelperFacts" method="ProcessFileAsyncThrowsIfFailedAfterThreeRetries" time="2.0315905" result="Pass" />
      <test name="Kudu.Services.Test.DropboxHelperFacts.ProcessFileAsyncWritesFileToSpecifiedPath" type="Kudu.Services.Test.DropboxHelperFacts" method="ProcessFileAsyncWritesFileToSpecifiedPath" time="0.0112813" result="Pass" />
      <test name="Kudu.Services.Test.FetchHandlerFacts.FetchHandlerBasicTests(scenario: BasicScenario { DeployCount = 1, IsReusable = True, WriteTimeUTCs = [] })" type="Kudu.Services.Test.FetchHandlerFacts" method="FetchHandlerBasicTests" time="0.0640788" result="Pass" />
      <test name="Kudu.Services.Test.FetchHandlerFacts.FetchHandlerBasicTests(scenario: ConcurrentScenario { DeployCount = 3, IsReusable = True, WriteTimeUTCs = [2017-08-29T11:22:38.6434267-04:00, 2017-08-29T11:22:48.6434267-04:00] })" type="Kudu.Services.Test.FetchHandlerFacts" method="FetchHandlerBasicTests" time="0.013994" result="Pass" />
      <test name="Kudu.Services.Test.FetchHandlerFacts.FetchHandlerBasicTests(scenario: NotReusableConcurrentScenario { DeployCount = 1, IsReusable = False, WriteTimeUTCs = [2017-08-29T11:22:38.6434267-04:00, 2017-08-29T11:22:48.6434267-04:00] })" type="Kudu.Services.Test.FetchHandlerFacts" method="FetchHandlerBasicTests" time="0.010783" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerRepositoryTypeTest(url: &quot;hg@scm.com:user/repo&quot;, is_hg: True, expected: Mercurial)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerRepositoryTypeTest" time="0.0159934" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerRepositoryTypeTest(url: &quot;git@scm.com:user/repo&quot;, is_hg: null, expected: Git)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerRepositoryTypeTest" time="0.0000512" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerRepositoryTypeTest(url: &quot;https://scm.com/repo&quot;, is_hg: True, expected: Mercurial)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerRepositoryTypeTest" time="0.0000432" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerRepositoryTypeTest(url: &quot;git@scm.com:user/repo&quot;, is_hg: True, expected: Mercurial)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerRepositoryTypeTest" time="0.000029" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerRepositoryTypeTest(url: &quot;https://scm.com/repo&quot;, is_hg: null, expected: Git)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerRepositoryTypeTest" time="0.0000284" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerRepositoryTypeTest(url: &quot;hg@scm.com:user/repo&quot;, is_hg: null, expected: Mercurial)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerRepositoryTypeTest" time="0.0000232" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerRepositoryTypeTest(url: &quot;hg@scm.com:user/repo&quot;, is_hg: False, expected: Git)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerRepositoryTypeTest" time="0.0000342" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerRepositoryTypeTest(url: &quot;git@scm.com:user/repo&quot;, is_hg: False, expected: Git)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerRepositoryTypeTest" time="0.0000284" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerRepositoryTypeTest(url: &quot;https://scm.com/repo&quot;, is_hg: False, expected: Git)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerRepositoryTypeTest" time="0.0000341" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerBranchTest(url: &quot;http://scm1.com/repo#&quot;, repoUrl: &quot;http://scm1.com/repo&quot;, commitId: null)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerBranchTest" time="0.0002628" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerBranchTest(url: &quot;## &quot;, repoUrl: &quot;#&quot;, commitId: &quot; &quot;)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerBranchTest" time="0.0000096" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerBranchTest(url: &quot;http://###:###@scm1.com/repo# 678 &quot;, repoUrl: &quot;http://###:###@scm1.com/repo&quot;, commitId: &quot; 678 &quot;)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerBranchTest" time="0.0000084" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerBranchTest(url: &quot;#&quot;, repoUrl: &quot;&quot;, commitId: null)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerBranchTest" time="0.0000062" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerBranchTest(url: &quot;http://scm1.com/repo&quot;, repoUrl: &quot;http://scm1.com/repo&quot;, commitId: null)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerBranchTest" time="0.0000084" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerBranchTest(url: &quot;http://scm1.com/repo#1234567&quot;, repoUrl: &quot;http://scm1.com/repo&quot;, commitId: &quot;1234567&quot;)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerBranchTest" time="0.0000073" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerSimpleTest(expected: ProcessDeployment, values: [[url, http://scm.com/repo], [format, basic]])" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerSimpleTest" time="0.0026271" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerSimpleTest(expected: ProcessDeployment, values: [[url, http://scm.com/repo], [format, basic], [is_hg, True]])" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerSimpleTest" time="0.0007088" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerSimpleTest(expected: ProcessDeployment, values: [[url, http://scm.com/repo], [format, basic], [is_hg, false]])" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerSimpleTest" time="0.0000359" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerSimpleTest(expected: ProcessDeployment, values: [[url, git@scm.com:suwatch/repo], [format, basic]])" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerSimpleTest" time="0.0000278" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerSimpleTest(expected: ProcessDeployment, values: [[url, hg@scm.com:suwatch/repo], [format, basic], [garbage, 1]])" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerSimpleTest" time="0.0038213" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerSimpleTest(expected: UnknownPayload, values: [])" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerSimpleTest" time="0.0000136" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerSimpleTest(expected: UnknownPayload, values: [[url, http://scm.com/repo]])" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerSimpleTest" time="0.0000204" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerSimpleTest(expected: UnknownPayload, values: [[format, basic]])" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerSimpleTest" time="0.0000199" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerDeployerTest(url: &quot;hg@scm.Bitbucket.org:user/repo&quot;, expected: &quot;Bitbucket&quot;)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerDeployerTest" time="0.0007458" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerDeployerTest(url: &quot;https://www.kilnhg.com/repo&quot;, expected: &quot;Kiln&quot;)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerDeployerTest" time="0.0000307" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerDeployerTest(url: &quot;http://scm1.com/repo&quot;, expected: &quot;scm1.com&quot;)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerDeployerTest" time="0.0000273" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerDeployerTest(url: &quot;git@scm2.com:user/repo&quot;, expected: &quot;scm2.com&quot;)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerDeployerTest" time="0.0000239" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerDeployerTest(url: &quot;https://www.github.com/repo&quot;, expected: &quot;GitHub&quot;)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerDeployerTest" time="0.0000267" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerDeployerTest(url: &quot;http://gitlab.proscat.nl/inspectbin&quot;, expected: &quot;GitlabHQ&quot;)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerDeployerTest" time="0.0000267" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerDeployerTest(url: &quot;https://www.codeplex.com/repo&quot;, expected: &quot;CodePlex&quot;)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerDeployerTest" time="0.0000267" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerInvalidUrl(url: &quot;git@scm.com&quot;)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerInvalidUrl" time="0.0013879" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerInvalidUrl(url: &quot;scm.com:user/repo&quot;)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerInvalidUrl" time="0.000666" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerInvalidUrl(url: &quot;git:scm.com@user/repo&quot;)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerInvalidUrl" time="0.0000895" result="Pass" />
      <test name="Kudu.Services.Test.GenericHandlerFacts.GenericHandlerInvalidUrl(url: &quot;invalid_url&quot;)" type="Kudu.Services.Test.GenericHandlerFacts" method="GenericHandlerInvalidUrl" time="0.0000815" result="Pass" />
      <test name="Kudu.Services.Test.GithubHandlerFacts.GitHubHandlerProcessesPayloadWithMultipleCommits" type="Kudu.Services.Test.GithubHandlerFacts" method="GitHubHandlerProcessesPayloadWithMultipleCommits" time="0.0044764" result="Pass" />
      <test name="Kudu.Services.Test.GithubHandlerFacts.GitHubHandlerReturnsNoOpForPayloadsNotMatchingTargetBranch" type="Kudu.Services.Test.GithubHandlerFacts" method="GitHubHandlerReturnsNoOpForPayloadsNotMatchingTargetBranch" time="0.000719" result="Pass" />
      <test name="Kudu.Services.Test.GithubHandlerFacts.GitHubHandlerIgnoresNonGithubPayloads" type="Kudu.Services.Test.GithubHandlerFacts" method="GitHubHandlerIgnoresNonGithubPayloads" time="0.0011302" result="Pass" />
      <test name="Kudu.Services.Test.GithubHandlerFacts.GitHubHandlerReturnsNoOpForMalformedPayloads(payloadContent: &quot;{ &quot;repository&quot;:{ &quot;url&quot;:&quot;https://github.com/KuduApp&quot;...)" type="Kudu.Services.Test.GithubHandlerFacts" method="GitHubHandlerReturnsNoOpForMalformedPayloads" time="0.0006346" result="Pass" />
      <test name="Kudu.Services.Test.GithubHandlerFacts.GitHubHandlerReturnsNoOpForMalformedPayloads(payloadContent: &quot;{ invalid: 'payload' }&quot;)" type="Kudu.Services.Test.GithubHandlerFacts" method="GitHubHandlerReturnsNoOpForMalformedPayloads" time="0.000329" result="Pass" />
      <test name="Kudu.Services.Test.GithubHandlerFacts.GitHubHandlerReturnsNoOpForMalformedPayloads(payloadContent: &quot;{ ref: '' }&quot;)" type="Kudu.Services.Test.GithubHandlerFacts" method="GitHubHandlerReturnsNoOpForMalformedPayloads" time="0.0003866" result="Pass" />
      <test name="Kudu.Services.Test.GithubHandlerFacts.GitHubHandlerReturnsNoOpForPayloadsWithEmptyAfter" type="Kudu.Services.Test.GithubHandlerFacts" method="GitHubHandlerReturnsNoOpForPayloadsWithEmptyAfter" time="0.0006426" result="Pass" />
      <test name="Kudu.Services.Test.InfoRefsControllerFacts.InfoRefsControllerIsDefaultWebRootContentTests(scenario: DefaultWebRootContent { })" type="Kudu.Services.Test.InfoRefsControllerFacts" method="InfoRefsControllerIsDefaultWebRootContentTests" time="0.1012313" result="Pass" />
      <test name="Kudu.Services.Test.InfoRefsControllerFacts.InfoRefsControllerIsDefaultWebRootContentTests(scenario: MissingWebRootFolder { })" type="Kudu.Services.Test.InfoRefsControllerFacts" method="InfoRefsControllerIsDefaultWebRootContentTests" time="0.004067" result="Pass" />
      <test name="Kudu.Services.Test.InfoRefsControllerFacts.InfoRefsControllerIsDefaultWebRootContentTests(scenario: EmptyWebRootFolder { })" type="Kudu.Services.Test.InfoRefsControllerFacts" method="InfoRefsControllerIsDefaultWebRootContentTests" time="0.0061109" result="Pass" />
      <test name="Kudu.Services.Test.InfoRefsControllerFacts.InfoRefsControllerIsDefaultWebRootContentTests(scenario: SingleWebRootContent { })" type="Kudu.Services.Test.InfoRefsControllerFacts" method="InfoRefsControllerIsDefaultWebRootContentTests" time="0.007159" result="Pass" />
      <test name="Kudu.Services.Test.InfoRefsControllerFacts.InfoRefsControllerIsDefaultWebRootContentTests(scenario: MultipleWebRootContent { })" type="Kudu.Services.Test.InfoRefsControllerFacts" method="InfoRefsControllerIsDefaultWebRootContentTests" time="0.0083855" result="Pass" />
      <test name="Kudu.Services.Test.InfoRefsControllerFacts.InfoRefsControllerInitialCommitRepositorySettingExists" type="Kudu.Services.Test.InfoRefsControllerFacts" method="InfoRefsControllerInitialCommitRepositorySettingExists" time="0.0567305" result="Pass" />
      <test name="Kudu.Services.Test.InfoRefsControllerFacts.InfoRefsControllerInitialCommitWebRootRepositoryExists" type="Kudu.Services.Test.InfoRefsControllerFacts" method="InfoRefsControllerInitialCommitWebRootRepositoryExists" time="0.0128222" result="Pass" />
      <test name="Kudu.Services.Test.InfoRefsControllerFacts.InfoRefsControllerInitialCommitNoScmType" type="Kudu.Services.Test.InfoRefsControllerFacts" method="InfoRefsControllerInitialCommitNoScmType" time="0.0074059" result="Pass" />
      <test name="Kudu.Services.Test.InfoRefsControllerFacts.InfoRefsControllerInitialCommitRepositoryExists" type="Kudu.Services.Test.InfoRefsControllerFacts" method="InfoRefsControllerInitialCommitRepositoryExists" time="0.0082493" result="Pass" />
      <test name="Kudu.Services.Test.InfoRefsControllerFacts.InfoRefsControllerInitialCommitDefaultWebContent" type="Kudu.Services.Test.InfoRefsControllerFacts" method="InfoRefsControllerInitialCommitDefaultWebContent" time="0.0085892" result="Pass" />
      <test name="Kudu.Services.Test.InfoRefsControllerFacts.InfoRefsControllerInitialCommitBasic" type="Kudu.Services.Test.InfoRefsControllerFacts" method="InfoRefsControllerInitialCommitBasic" time="0.0086256" result="Pass" />
      <test name="Kudu.Services.Test.InfoRefsControllerFacts.InfoRefsControllerDisallowsPushingAGitRepositoryWhenHgRepositoryIsAlreadyPresent" type="Kudu.Services.Test.InfoRefsControllerFacts" method="InfoRefsControllerDisallowsPushingAGitRepositoryWhenHgRepositoryIsAlreadyPresent" time="0.0073734" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseEmailFromAuthorWithoutEmailAddress(author: &quot;Test User &lt;email&gt;&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseEmailFromAuthorWithoutEmailAddress" time="0.008547" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseEmailFromAuthorWithoutEmailAddress(author: null)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseEmailFromAuthorWithoutEmailAddress" time="0.0000289" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseEmailFromAuthorWithoutEmailAddress(author: &quot;&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseEmailFromAuthorWithoutEmailAddress" time="0.0000079" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseEmailFromAuthorWithoutEmailAddress(author: &quot;Test User &lt;&gt;&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseEmailFromAuthorWithoutEmailAddress" time="0.0000341" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseEmailFromAuthorWithoutEmailAddress(author: &quot;    &quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseEmailFromAuthorWithoutEmailAddress" time="0.0000073" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseEmailFromAuthorWithoutEmailAddress(author: &quot;&#x9;&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseEmailFromAuthorWithoutEmailAddress" time="0.0000102" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseEmailFromAuthorWithoutEmailAddress(author: &quot;Test User&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseEmailFromAuthorWithoutEmailAddress" time="0.0000267" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.KilnHgHandlerIgnoresNonKilnPayloads" type="Kudu.Services.Test.KilnHgHandlerFacts" method="KilnHgHandlerIgnoresNonKilnPayloads" time="0.0020266" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.KilnHgHandlerParsesKilnPayloads(repositoryUrl: &quot;https://kudutest.kilnhg.com/Code/Test/Group/KuduAp&quot;...)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="KilnHgHandlerParsesKilnPayloads" time="0.0181199" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.KilnHgHandlerParsesKilnPayloads(repositoryUrl: &quot;http://kudutest.kilnhg.com/Code/Test/Group/KuduApp&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="KilnHgHandlerParsesKilnPayloads" time="0.0001909" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.IsKilnRequestWithCustomDomainPatterns(expectedResult: True, domainPattern: &quot;\.kilnhg\.com&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="IsKilnRequestWithCustomDomainPatterns" time="0.0005331" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.IsKilnRequestWithCustomDomainPatterns(expectedResult: False, domainPattern: &quot;\.github\.com&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="IsKilnRequestWithCustomDomainPatterns" time="0.0000507" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseEmailFromAuthorWithEmailAddress(author: &quot;&lt;test@user.com&gt;&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseEmailFromAuthorWithEmailAddress" time="0.0001373" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseEmailFromAuthorWithEmailAddress(author: &quot;  &lt;test@user.com&gt;&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseEmailFromAuthorWithEmailAddress" time="0.0000182" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseEmailFromAuthorWithEmailAddress(author: &quot;Test User &lt;test@user.com&gt;&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseEmailFromAuthorWithEmailAddress" time="0.0000147" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseEmailFromAuthorWithEmailAddress(author: &quot;test@user.com&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseEmailFromAuthorWithEmailAddress" time="0.0000147" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseEmailFromAuthorWithEmailAddress(author: &quot;Test &lt;test@user.com&gt;&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseEmailFromAuthorWithEmailAddress" time="0.0000153" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseEmailFromAuthorWithEmailAddress(author: &quot; User &lt;test@user.com&gt;&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseEmailFromAuthorWithEmailAddress" time="0.0000147" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseNameFromAuthor(expectedResult: &quot;&lt;test@user.com&gt;&quot;, author: &quot;&lt;test@user.com&gt;&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseNameFromAuthor" time="0.0001362" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseNameFromAuthor(expectedResult: &quot;User&quot;, author: &quot; User &lt;test@user.com&gt;&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseNameFromAuthor" time="0.0000176" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseNameFromAuthor(expectedResult: &quot;Test&quot;, author: &quot;Test &lt;test@user.com&gt;&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseNameFromAuthor" time="0.0000164" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseNameFromAuthor(expectedResult: &quot;Test User&quot;, author: &quot;Test User &lt;email&gt;&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseNameFromAuthor" time="0.0000141" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseNameFromAuthor(expectedResult: &quot;test@user.com&quot;, author: &quot;test@user.com&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseNameFromAuthor" time="0.0000341" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseNameFromAuthor(expectedResult: &quot;Test User&quot;, author: &quot; Test User &quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseNameFromAuthor" time="0.0000284" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseNameFromAuthor(expectedResult: null, author: &quot;&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseNameFromAuthor" time="0.0000073" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseNameFromAuthor(expectedResult: null, author: &quot;    &quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseNameFromAuthor" time="0.0000102" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseNameFromAuthor(expectedResult: null, author: &quot;&#x9;&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseNameFromAuthor" time="0.0000079" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseNameFromAuthor(expectedResult: &quot;&lt;test@user.com&gt;&quot;, author: &quot;  &lt;test@user.com&gt;&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseNameFromAuthor" time="0.0000175" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseNameFromAuthor(expectedResult: null, author: null)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseNameFromAuthor" time="0.0000073" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseNameFromAuthor(expectedResult: &quot;Test User&quot;, author: &quot;Test User &lt;&gt;&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseNameFromAuthor" time="0.000013" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.ParseNameFromAuthor(expectedResult: &quot;Test User&quot;, author: &quot;Test User &lt;test@user.com&gt;&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="ParseNameFromAuthor" time="0.0000181" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.IsKilnRequestWithoutRepositoryUrl(payloadContent: &quot;{ &quot;repository&quot;: { &quot;repo_url&quot;: &quot;https://kudutest.ki&quot;...)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="IsKilnRequestWithoutRepositoryUrl" time="0.0004293" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.IsKilnRequestWithoutRepositoryUrl(payloadContent: &quot;{ &quot;repo&quot;: { &quot;repo_url&quot;: &quot;https://kudutest.kilnhg.c&quot;...)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="IsKilnRequestWithoutRepositoryUrl" time="0.000021" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.KilnHgHandlerParsesKilnPayloadsForPrivateRepositories(repositoryUrl: &quot;https://kudutest.kilnhg.com/Code/Test/Group/KuduAp&quot;...)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="KilnHgHandlerParsesKilnPayloadsForPrivateRepositories" time="0.0018082" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.KilnHgHandlerParsesKilnPayloadsForPrivateRepositories(repositoryUrl: &quot;http://kudutest.kilnhg.com/Code/Test/Group/KuduApp&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="KilnHgHandlerParsesKilnPayloadsForPrivateRepositories" time="0.0001687" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.KilnHgHandlerParsesKilnPayloadsForRepositoriesWithMultipleCommitsAccrossBranches" type="Kudu.Services.Test.KilnHgHandlerFacts" method="KilnHgHandlerParsesKilnPayloadsForRepositoriesWithMultipleCommitsAccrossBranches" time="0.0031209" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.KilnHgHandlerParsesKilnPayloadsWithAccessTokenCommit" type="Kudu.Services.Test.KilnHgHandlerFacts" method="KilnHgHandlerParsesKilnPayloadsWithAccessTokenCommit" time="0.0023733" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.IsKilnRequestWithDefaultDomainPatterns(expectedResult: False, domain: &quot;github.com&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="IsKilnRequestWithDefaultDomainPatterns" time="0.0008017" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.IsKilnRequestWithDefaultDomainPatterns(expectedResult: True, domain: &quot;kilnhg.com&quot;)" type="Kudu.Services.Test.KilnHgHandlerFacts" method="IsKilnRequestWithDefaultDomainPatterns" time="0.0000353" result="Pass" />
      <test name="Kudu.Services.Test.KilnHgHandlerFacts.KilnHgHandlerReturnsNoOpForCommitsThatAreNotTheTargetBranch" type="Kudu.Services.Test.KilnHgHandlerFacts" method="KilnHgHandlerReturnsNoOpForCommitsThatAreNotTheTargetBranch" time="0.0006397" result="Pass" />
      <test name="Kudu.Services.Test.ReceivePackHandlerFacts.ReceivePackHandlerThrowsIfPushingAGitRepositoryWhenHgRepositoryIsAlreadyPresent" type="Kudu.Services.Test.ReceivePackHandlerFacts" method="ReceivePackHandlerThrowsIfPushingAGitRepositoryWhenHgRepositoryIsAlreadyPresent" time="0.0443279" result="Pass" />
      <test name="Kudu.Services.Test.RuntimeControllerFacts.RuntimeControllerReturnsNodeVersions" type="Kudu.Services.Test.RuntimeControllerFacts" method="RuntimeControllerReturnsNodeVersions" time="0.1362977" result="Pass" />
      <test name="Kudu.Services.Test.RuntimeControllerFacts.RuntimeControllerReturnsEmptyListIfDirectoryDoesNotExist" type="Kudu.Services.Test.RuntimeControllerFacts" method="RuntimeControllerReturnsEmptyListIfDirectoryDoesNotExist" time="0.0048625" result="Pass" />
      <test name="Kudu.Services.Test.SettingsControllerFacts.SettingsControllerConflict" type="Kudu.Services.Test.SettingsControllerFacts" method="SettingsControllerConflict" time="5.2229909" result="Pass" />
      <test name="Kudu.Services.Test.SSHKeyControllerTests.CreatePublicKeyForcesRecreateIfParameterIsSet(ensurePublicKey: &quot;true&quot;)" type="Kudu.Services.Test.SSHKeyControllerTests" method="CreatePublicKeyForcesRecreateIfParameterIsSet" time="0.0193739" result="Pass" />
      <test name="Kudu.Services.Test.SSHKeyControllerTests.CreatePublicKeyForcesRecreateIfParameterIsSet(ensurePublicKey: &quot;1&quot;)" type="Kudu.Services.Test.SSHKeyControllerTests" method="CreatePublicKeyForcesRecreateIfParameterIsSet" time="0.001673" result="Pass" />
      <test name="Kudu.Services.Test.SSHKeyControllerTests.GetPublicKeyDoesNotForceRecreatePublicKeyByDefault" type="Kudu.Services.Test.SSHKeyControllerTests" method="GetPublicKeyDoesNotForceRecreatePublicKeyByDefault" time="0.0051688" result="Pass" />
      <test name="Kudu.Services.Test.VfsControllerFacts.DeleteRequestReturnsNotFoundIfItemDoesNotExist" type="Kudu.Services.Test.VfsControllerFacts" method="DeleteRequestReturnsNotFoundIfItemDoesNotExist" time="0.129393" result="Pass" />
      <test name="Kudu.Services.Test.VfsControllerFacts.DeleteRequestDoesNotRecursivelyDeleteDirectoriesByDefault" type="Kudu.Services.Test.VfsControllerFacts" method="DeleteRequestDoesNotRecursivelyDeleteDirectoriesByDefault" time="0.018648" result="Pass" />
      <test name="Kudu.Services.Test.VfsControllerFacts.DeleteItemReturnsPreconditionFailedResponseIfFileDeleteDoesNotContainETag" type="Kudu.Services.Test.VfsControllerFacts" method="DeleteItemReturnsPreconditionFailedResponseIfFileDeleteDoesNotContainETag" time="0.0175816" result="Pass" />
      <test name="Kudu.Services.Test.VfsControllerFacts.MapRouteToLocalPathTests(requestUri: &quot;https://localhost/vfs/SystemDrive/Program Files (x&quot;..., expected: &quot;%ProgramFiles(x86)%&quot;)" type="Kudu.Services.Test.VfsControllerFacts" method="MapRouteToLocalPathTests" time="0.00608" result="Pass" />
      <test name="Kudu.Services.Test.VfsControllerFacts.MapRouteToLocalPathTests(requestUri: &quot;https://localhost/vfs/LocalSiteRoot/Temp&quot;, expected: &quot;C:\DWASFiles\Sites\SiteName\Temp&quot;)" type="Kudu.Services.Test.VfsControllerFacts" method="MapRouteToLocalPathTests" time="0.0109483" result="Pass" />
      <test name="Kudu.Services.Test.VfsControllerFacts.MapRouteToLocalPathTests(requestUri: &quot;https://localhost/vfs/LocalSiteRoot&quot;, expected: &quot;C:\DWASFiles\Sites\SiteName&quot;)" type="Kudu.Services.Test.VfsControllerFacts" method="MapRouteToLocalPathTests" time="0.0031187" result="Pass" />
      <test name="Kudu.Services.Test.VfsControllerFacts.MapRouteToLocalPathTests(requestUri: &quot;https://localhost/vfs/SystemDrive/windows&quot;, expected: &quot;%SystemDrive%\windows&quot;)" type="Kudu.Services.Test.VfsControllerFacts" method="MapRouteToLocalPathTests" time="0.0030919" result="Pass" />
      <test name="Kudu.Services.Test.VfsControllerFacts.MapRouteToLocalPathTests(requestUri: &quot;https://localhost/vfs/LogFiles/kudu&quot;, expected: &quot;C:\DWASFiles\Sites\SiteName\VirtualDirectory0\LogF&quot;...)" type="Kudu.Services.Test.VfsControllerFacts" method="MapRouteToLocalPathTests" time="0.0034055" result="Pass" />
      <test name="Kudu.Services.Test.VfsControllerFacts.MapRouteToLocalPathTests(requestUri: &quot;https://localhost/vfs&quot;, expected: &quot;C:\DWASFiles\Sites\SiteName\VirtualDirectory0&quot;)" type="Kudu.Services.Test.VfsControllerFacts" method="MapRouteToLocalPathTests" time="0.0031158" result="Pass" />
      <test name="Kudu.Services.Test.VfsControllerFacts.MapRouteToLocalPathTests(requestUri: &quot;https://localhost/vfs/SystemDrive&quot;, expected: &quot;%SystemDrive%&quot;)" type="Kudu.Services.Test.VfsControllerFacts" method="MapRouteToLocalPathTests" time="0.0030782" result="Pass" />
      <test name="Kudu.Services.Test.VfsControllerFacts.DeleteRequestInvokesRecursiveDeleteBasedOnParameter(recursive: True)" type="Kudu.Services.Test.VfsControllerFacts" method="DeleteRequestInvokesRecursiveDeleteBasedOnParameter" time="0.0151888" result="Pass" />
      <test name="Kudu.Services.Test.VfsControllerFacts.DeleteRequestInvokesRecursiveDeleteBasedOnParameter(recursive: False)" type="Kudu.Services.Test.VfsControllerFacts" method="DeleteRequestInvokesRecursiveDeleteBasedOnParameter" time="0.0058103" result="Pass" />
      <test name="Kudu.Services.Test.VfsControllerFacts.DeleteItemDeletesFileIfETagMatches(etag: *)" type="Kudu.Services.Test.VfsControllerFacts" method="DeleteItemDeletesFileIfETagMatches" time="0.0180475" result="Pass" />
      <test name="Kudu.Services.Test.VfsControllerFacts.DeleteItemDeletesFileIfETagMatches(etag: &quot;00c0b16b2129cf08&quot;)" type="Kudu.Services.Test.VfsControllerFacts" method="DeleteItemDeletesFileIfETagMatches" time="0.0062568" result="Pass" />
      <test name="Kudu.Services.Test.VfsControllerFacts.DeleteItemReturnsPreconditionFailedIfETagDoesNotMatch" type="Kudu.Services.Test.VfsControllerFacts" method="DeleteItemReturnsPreconditionFailedIfETagDoesNotMatch" time="0.0103678" result="Pass" />
      <test name="Kudu.Services.Test.ZipArchiveExtensionFacts.AddFileToArchiveCreatesEntryUnderDirectory(fileName: &quot;Bar/Qux/Foo.txt&quot;, content: &quot;I'm making a note here&quot;)" type="Kudu.Services.Test.ZipArchiveExtensionFacts" method="AddFileToArchiveCreatesEntryUnderDirectory" time="0.1021089" result="Pass" />
      <test name="Kudu.Services.Test.ZipArchiveExtensionFacts.AddFileToArchiveCreatesEntryUnderDirectory(fileName: &quot;Foo.txt&quot;, content: &quot;This was a triumph&quot;)" type="Kudu.Services.Test.ZipArchiveExtensionFacts" method="AddFileToArchiveCreatesEntryUnderDirectory" time="0.0016394" result="Pass" />
      <test name="Kudu.Services.Test.ZipArchiveExtensionFacts.AddFileInUseTests" type="Kudu.Services.Test.ZipArchiveExtensionFacts" method="AddFileInUseTests" time="0.0193021" result="Pass" />
      <test name="Kudu.Services.Test.ZipArchiveExtensionFacts.AddDirectoryToArchiveIncludesDirectoryTreeInArchive" type="Kudu.Services.Test.ZipArchiveExtensionFacts" method="AddDirectoryToArchiveIncludesDirectoryTreeInArchive" time="0.0165044" result="Pass" />
      <test name="Kudu.Services.Test.VSOHandlerFacts.VSOHandlerBasic" type="Kudu.Services.Test.VSOHandlerFacts" method="VSOHandlerBasic" time="0.0146972" result="Pass" />
      <test name="Kudu.Services.Test.VSOHandlerFacts.VSOHandlerUnknownPayload" type="Kudu.Services.Test.VSOHandlerFacts" method="VSOHandlerUnknownPayload" time="0.0015288" result="Pass" />
      <test name="Kudu.Services.Test.OneDriveDeployment.OneDriveHandlerTests.TryParseDeploymentInfoShouldReturnProcessDeployment" type="Kudu.Services.Test.OneDriveDeployment.OneDriveHandlerTests" method="TryParseDeploymentInfoShouldReturnProcessDeployment" time="0.183124" result="Pass" />
      <test name="Kudu.Services.Test.OneDriveDeployment.OneDriveHandlerTests.TryParseDeploymentInfoShouldReturnUnknownPayload" type="Kudu.Services.Test.OneDriveDeployment.OneDriveHandlerTests" method="TryParseDeploymentInfoShouldReturnUnknownPayload" time="0.0052103" result="Pass" />
      <test name="Kudu.Services.Test.OneDriveDeployment.OneDriveHelperSyncTests.SyncBasicTests" type="Kudu.Services.Test.OneDriveDeployment.OneDriveHelperSyncTests" method="SyncBasicTests" time="0.1998144" result="Pass" />
      <test name="Kudu.Services.Test.Jobs.JobsControllerTests.InvokeARMTriggeredJob_ShouldReturn200" type="Kudu.Services.Test.Jobs.JobsControllerTests" method="InvokeARMTriggeredJob_ShouldReturn200" time="0.1084548" result="Pass" />
      <test name="Kudu.Services.Test.Jobs.JobsControllerTests.InvokeTriggeredJob_ShouldReturn202" type="Kudu.Services.Test.Jobs.JobsControllerTests" method="InvokeTriggeredJob_ShouldReturn202" time="0.0032858" result="Pass" />
      <test name="Kudu.Services.Test.Jobs.JobsControllerTests.InvokeTriggeredJob_ReadOnlyFileSystem_ShouldReturn503" type="Kudu.Services.Test.Jobs.JobsControllerTests" method="InvokeTriggeredJob_ReadOnlyFileSystem_ShouldReturn503" time="0.0176671" result="Pass" />
      <test name="Kudu.Services.Test.Diagnostics.ProcessControllerFacts.SetEnvironmentInfo_NotWebJob_ReturnsExpectedResults" type="Kudu.Services.Test.Diagnostics.ProcessControllerFacts" method="SetEnvironmentInfo_NotWebJob_ReturnsExpectedResults" time="0.0039512" result="Pass" />
      <test name="Kudu.Services.Test.Diagnostics.ProcessControllerFacts.SetEnvironmentInfo_WebJob_ReturnsExpectedResults" type="Kudu.Services.Test.Diagnostics.ProcessControllerFacts" method="SetEnvironmentInfo_WebJob_ReturnsExpectedResults" time="0.0006568" result="Pass" />
    </collection>
  </assembly>
</assemblies>